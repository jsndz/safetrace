version: "3"

tasks:
  # Kind cluster setup (for local development)
  kind:generate-config:
    cmds:
      - REPLACE_WITH_ABSOLUTE_PATH=${PWD} envsubst < kind-config.yaml.TEMPLATE > kind-config.yaml
    desc: "Generate kind config with local absolute paths for PV mounts"

  kind:create-cluster:
    cmds:
      - kind create cluster --config kind-config.yaml
    desc: "Create a Kubernetes cluster using kind"

  kind:enable-loadbalancer:
    desc: "Run sigs.k8s.io/cloud-provider-kind@latest to enable load balancer services with KinD"
    cmds:
      - cloud-provider-kind

  kind:delete-cluster:
    cmds:
      - kind delete cluster
    desc: "Delete an existing kind Kubernetes cluster"

  # Kubernetes namespace management
  k8s:apply-namespace:
    cmds:
      - kubectl apply -f k8s/namespace.yaml
    desc: "Apply the namespace configuration to the cluster"

  k8s:delete-namespace:
    desc: "Delete the namespace and all resources inside of it"
    cmds:
      - kubectl delete -f k8s/namespace.yaml

  # Apply all k8s resources
  k8s:apply-all:
    desc: "Apply all Kubernetes resources from the k8s folder"
    cmds:
      - kubectl apply -f k8s/

  # Delete all k8s resources
  k8s:delete-all:
    desc: "Delete all Kubernetes resources from the k8s folder"
    cmds:
      - kubectl delete -f k8s/

  # Apply individual resource types
  k8s:apply-secrets:
    desc: "Apply secrets configuration"
    cmds:
      - kubectl apply -f k8s/secrets.yaml

  k8s:apply-configmap:
    desc: "Apply ConfigMap configuration"
    cmds:
      - kubectl apply -f k8s/configMap.yaml

  k8s:apply-databases:
    desc: "Apply database resources (PostgreSQL and Kafka)"
    cmds:
      - kubectl apply -f k8s/auth-postgres.yaml
      - kubectl apply -f k8s/auth-postgres-service.yaml
      - kubectl apply -f k8s/fencer-postgres.yaml
      - kubectl apply -f k8s/fencer-postgres-service.yaml
      - kubectl apply -f k8s/kafka.yaml
      - kubectl apply -f k8s/kafka-service.yaml

  k8s:apply-services:
    desc: "Apply all service resources"
    cmds:
      - kubectl apply -f k8s/gateway-service.yaml
      - kubectl apply -f k8s/auth-service.yaml
      - kubectl apply -f k8s/server-service.yaml
      - kubectl apply -f k8s/alert-service.yaml
      - kubectl apply -f k8s/fencer-service.yaml

  k8s:apply-deployments:
    desc: "Apply all deployment resources"
    cmds:
      - kubectl apply -f k8s/gateway-deployment.yaml
      - kubectl apply -f k8s/auth-deployment.yaml
      - kubectl apply -f k8s/server-deployment.yaml
      - kubectl apply -f k8s/alert-deployment.yaml
      - kubectl apply -f k8s/fencer-deployment.yaml
      - kubectl apply -f k8s/logger-deployment.yaml

  # Deployment management
  k8s:rollout-restart:
    desc: "Rollout restart a deployment"
    cmds:
      - kubectl rollout restart deployment ${DEPLOYMENT} -n safetrace
    vars:
      DEPLOYMENT:
        sh: 'echo "Usage: task k8s:rollout-restart DEPLOYMENT=gateway"'

  k8s:rollout-status:
    desc: "Check rollout status of a deployment"
    cmds:
      - kubectl rollout status deployment ${DEPLOYMENT} -n safetrace
    vars:
      DEPLOYMENT:
        sh: 'echo "Usage: task k8s:rollout-status DEPLOYMENT=gateway"'

  # Port forwarding
  k8s:port-forward-gateway:
    desc: "Port forward to the gateway service"
    cmds:
      - kubectl port-forward -n safetrace service/gateway 8080:8080

  k8s:port-forward-auth:
    desc: "Port forward to the auth service"
    cmds:
      - kubectl port-forward -n safetrace service/auth ${PORT:-8081}:8080
    vars:
      PORT:
        sh: echo "8081"

  k8s:port-forward-server:
    desc: "Port forward to the server service"
    cmds:
      - kubectl port-forward -n safetrace service/server ${PORT:-8082}:8080
    vars:
      PORT:
        sh: echo "8082"

  # Status and debugging
  k8s:get-pods:
    desc: "Get all pods in the safetrace namespace"
    cmds:
      - kubectl get pods -n safetrace

  k8s:get-services:
    desc: "Get all services in the safetrace namespace"
    cmds:
      - kubectl get services -n safetrace

  k8s:get-deployments:
    desc: "Get all deployments in the safetrace namespace"
    cmds:
      - kubectl get deployments -n safetrace

  k8s:get-all:
    desc: "Get all resources in the safetrace namespace"
    cmds:
      - kubectl get all -n safetrace

  k8s:logs:
    desc: "Get logs from a pod"
    cmds:
      - kubectl logs -n safetrace ${POD} -f
    vars:
      POD:
        sh: 'echo "Usage: task k8s:logs POD=gateway-xxx-xxx"'

  k8s:describe:
    desc: "Describe a resource"
    cmds:
      - kubectl describe ${RESOURCE_TYPE} ${RESOURCE_NAME} -n safetrace
    vars:
      RESOURCE_TYPE:
        sh: 'echo "Usage: task k8s:describe RESOURCE_TYPE=deployment RESOURCE_NAME=gateway"'
      RESOURCE_NAME:
        sh: echo ""
