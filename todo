## Architecture Overview

**Components:**

- Client: React + Vite
- Gateway: Go/Nginx (for auth+routing)
- Auth Service: Go + Postgres
- Server: Go (Kafka producer)
- Kafka Broker: Docker Compose
- Geo-Fencer: Go (Kafka consumer + DB)
- Logger: Go (Kafka consumer)
- Notification Service: Go (SSE server)
- DBs: Postgres for auth, Postgres or Redis for geo-fences

---

### Phase 1: Setup & Foundation

- [x] Setup project folder structure (client/, gateway/, cmd/server/, kafka/, services/)
- [x] Docker Compose with:

  - [x] Kafka + Zookeeper
  - [x] Postgres for auth

- [x] Write a simple Go REST API with Fiber: `/health`
- [x] Create a Kafka producer in Go (`segmentio/kafka-go`) that publishes dummy location data
- [x] Create a Kafka consumer that logs messages to console

---

### Phase 2: Client App + Location Tracking

- [x] React app that:

  - [x] Gets and displays live location
  - [x] Sends location to backend every X seconds via `/location`

- [x] Backend API:

  - [x] `/location` endpoint in Go
  - [x] Validate input, then push to `location-events` Kafka topic

- [x] Connect Kafka to log messages from client

---

### Phase 3: Auth Microservice

- [x] Auth service:

  - [x] Signup (`POST /register`)
  - [x] Login (`POST /login`) → returns JWT
  - [x] Validate (`GET /me`)

- [x] Use JWT middleware on server and gateway
- [x] Frontend:

  - [x] Login/Register forms
  - [x] Store JWT in localStorage or HTTP-only cookie

---

### Phase 4: Gateway

- [x] Gateway:

  - [x] Validate JWT (call auth service)
  - [x] Route `/location` → server
  - [x] Route `/login`, `/register` → auth
  - [x] Route `/alerts` (SSE) → notification

- [x] Protect all internal services behind gateway

---

### Phase 5: Geo-Fencer Service

- [x] Geo-Fencer:

  - [x] Kafka consumer of `location-events`
  - [x] Load geo-fence config from DB
  - [x] Compare location with geo-fence radius
  - [x] If violation, publish to `alerts` topic

- [x] Store:

  - [x] `geo_fences` table (userId, centerLat, centerLong, radius)

- [x] API to set geo-fence:

  - [x] `POST /set-fence`

---

### Phase 6: Notification System with SSE

- [x] Notification Service:

  - [x] Kafka consumer of `alerts` topic
  - [x] Maintain map of `userId → SSE connection`
  - [x] Push alert to correct clientCopy

- [x] Frontend:

  - [x] Connect to SSE: `/alerts`
  - [x] Display alert when event is received

---

### Phase 7: Logger Extension

- [x] Logger service:

  - [x] Kafka consumer of `location-events`
  - [x] Write to:

    - [x] File logs (`userId_timestamp.txt`)
    - or DB (`location_logs` table)

---

### Phase 8: Final Integrations

- [x] Environment setup with `.env` for all services
- [x] Docker Compose for full system:

  - [x] Kafka
  - [x] Auth
  - [x] Server
  - [x] Geo-Fencer
  - [x] Logger
  - [x] Notification
  - [x] Gateway

- [x] Final client UI polish:

  - [x] Login
  - [x] Real-time location status
  - [ ] Alerts display

---
